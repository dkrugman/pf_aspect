- id: 'pic1607021277342'
  alias: picframe_directory_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_directory
  - platform: homeassistant
    event: start
  condition:
  - condition: or
    conditions:
    - condition: template
      value_template: '{{ ( states("sensor.picframe_directory") ) != ( states("input_select.picframe_directory")
        ) }}'
    - condition: template
      value_template: '{{ ( state_attr("sensor.picframe_directory", "directories")
        ) != ( state_attr("input_select.picframe_directory", "options") ) }}'
  action:
  - service: input_select.set_options
    data:
      options: '{{ state_attr(''sensor.picframe_directory'', ''directories'') }}'
    entity_id: input_select.picframe_directory
  - service: input_select.select_option
    data:
      option: '{{  states("sensor.picframe_directory") }}'
    entity_id: input_select.picframe_directory
  mode: single
- id: 'pic1607034504666'
  alias: picframe_directory_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_select.picframe_directory
  condition: []
  action:
  - service: mqtt.publish
    data:
      topic: picframe/directory
      payload: '{{ states("input_select.picframe_directory") }}'
  mode: single
- id: 'pic1607454156183'
  alias: picframe_fade_time_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_fade_time
  condition:
  - condition: template
    value_template: '{{ states("input_number.picframe_fade_time") != states("sensor.picframe_fade_time")
      }}'
  action:
  - service: input_number.set_value
    data:
      value: '{{ states("sensor.picframe_fade_time") }}'
    entity_id: input_number.picframe_fade_time
  mode: single
- id: 'pic1607454536910'
  alias: picframe_time_delay_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_time_delay
  condition:
  - condition: template
    value_template: '{{ states("input_number.picframe_time_delay") != states("sensor.picframe_time_delay")
      }}'
  action:
  - service: input_number.set_value
    data:
      value: '{{ states("sensor.picframe_time_delay") }}'
    entity_id: input_number.picframe_time_delay
  mode: single
- id: 'pic1607456131052'
  alias: picframe.date_from_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_date_from
  condition:
  - condition: template
    value_template: '{{ as_timestamp(strptime(states("input_text.picframe_date_from"),"%d.%m.%Y"))
      | int != states("sensor.picframe_date_from")|int }}'
  action:
  - service: input_text.set_value
    data:
      value: '{{ states(''sensor.picframe_date_from'') | int | timestamp_custom(''%d.%m.%Y'')
        }}'
    entity_id: input_text.picframe_date_from
  mode: single
- id: 'pic1607456341584'
  alias: picframe.date_to_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_date_to
  condition:
  - condition: template
    value_template: '{{ as_timestamp(strptime(states("input_text.picframe_date_to"),"%d.%m.%Y"))
      | int != states("sensor.picframe_date_to")|int }}'
  action:
  - service: input_text.set_value
    data:
      value: '{{ states(''sensor.picframe_date_to'') | int | timestamp_custom(''%d.%m.%Y'')
        }}'
    entity_id: input_text.picframe_date_to
  mode: single
- id: 'pic1607456725404'
  alias: picframe_fade_time_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_number.picframe_fade_time
  condition:
  - condition: template
    value_template: '{{ states("input_number.picframe_fade_time") != states("sensor.picframe_fade_time")
      }}'
  action:
  - service: mqtt.publish
    data:
      topic: picframe/fade_time
      payload: '{{ states("input_number.picframe_fade_time") }}'
  mode: single
- id: 'pic1607457027848'
  alias: picframe_time_delay_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_number.picframe_time_delay
  condition:
  - condition: template
    value_template: '{{ states("input_number.picframe_time_delay") != states("sensor.picframe_time_delay")
      }}'
  action:
  - service: mqtt.publish
    data:
      topic: picframe/time_delay
      payload: '{{ states("input_number.picframe_time_delay") }}'
  mode: single
- id: 'pic1607457885153'
  alias: picframe.date_to_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_text.picframe_date_to
  condition:
  - condition: template
    value_template: '{{ as_timestamp(strptime(states("input_text.picframe_date_to"),"%d.%m.%Y"))
      | int != states("sensor.picframe_date_to")|int }}'
  action:
  - service: mqtt.publish
    data:
      topic: picframe/date_to
      payload: '{{ as_timestamp(strptime(states("input_text.picframe_date_to"),"%d.%m.%Y"))
        | int }}'
  mode: single
- id: 'pic1607466334037'
  alias: picframe.date_from_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_text.picframe_date_from
  condition:
  - condition: template
    value_template: '{{ as_timestamp(strptime(states("input_text.picframe_date_from"),"%d.%m.%Y"))
      | int != states("sensor.picframe_date_from")|int }}'
  action:
  - service: mqtt.publish
    data:
      topic: picframe/date_from
      payload: '{{ as_timestamp(strptime(states("input_text.picframe_date_from"),"%d.%m.%Y"))
        | int }}'
  mode: single
- id: 'pic1613333826633'
  alias: picframe_brightness_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_brightness
  condition:
  - condition: template
    value_template: '{{ states("input_number.picframe_brightness") | int  != states("sensor.picframe_brightness")
      | int * 100 }}'
  action:
  - service: input_number.set_value
    data:
      value: '{{ states("sensor.picframe_brightness") | int * 100 }}'
    entity_id: input_number.picframe_brightness
  mode: single
- id: 'pic1613334010761'
  alias: picframe_brightness_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_number.picframe_brightness
  condition:
  - condition: template
    value_template: '{{ states("input_number.picframe_brightness") | int != states("sensor.picframe_brightness")
      | int * 100 }}'
  action:
  - service: mqtt.publish
    data:
      topic: picframe/brightness
      payload: '{{ states("input_number.picframe_brightness") | float / 100.0 }}'
  mode: single
- id: 'pic1613395289608'
  alias: picframe_location_filter_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_text.picframe_location_filter
  condition: []
  action:
  - service: mqtt.publish
    data:
      topic: picframe/location_filter
      payload: '{{ states("input_text.picframe_location_filter") }}'
  mode: single
- id: 'pic1613558160875'
  alias: picframe_tags_filter_set
  description: ''
  trigger:
  - platform: state
    entity_id: input_text.picframe_tags_filter
  condition: []
  action:
  - service: mqtt.publish
    data:
      topic: picframe/tags_filter
      payload: '{{ states("input_text.picframe_tags_filter") }}'
  mode: single
- id: 'pic1613592985293'
  alias: picframe_location_filter_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_location_filter
  condition:
  - condition: template
    value_template: "{% if is_state('sensor.picframe_location_filter', 'None') %}\n\
      \      {{ states('input_text.picframe_location_filter') != '' }}\n{% else %}\n\
      \      {{ states('input_text.picframe_location_filter') != states('sensor.picframe_location_filter')\
      \ }}.\n{% endif %}"
  action:
  - service: input_text.set_value
    data:
      value: '{{ states("sensor.picframe_location_filter") }}'
    entity_id: input_text.picframe_location_filter
  mode: single
- id: 'pic1613593115253'
  alias: picframe_location_tags_get
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.picframe_tags_filter
  condition:
  - condition: template
    value_template: "{% if is_state('sensor.picframe_tags_filter', 'None') %}\n  \
      \    {{ states('input_text.picframe_tags_filter') != '' }}\n{% else %}\n   \
      \   {{ states('input_text.picframe_tags_filter') != states('sensor.picframe_tags_filter')\
      \ }}.\n{% endif %}"
  action:
  - service: input_text.set_value
    data:
      value: '{{ states("sensor.picframe_tags_filter") }}'
    entity_id: input_text.picframe_tags_filter
  mode: single
